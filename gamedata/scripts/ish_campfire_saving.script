local campfire_saving = true
local campfire_radius = 15
local base_radius = 50
local token_granted = time_infinite
local token_downtime = 1000 * 60 * 5 -- Five minutes
local token_redeemed = false
local notifications = false
local notmommy = false

local getstr = game.translate_string

bonus_bases = {}
bonus_bases.pri_monolith = {monolith = true}
bonus_bases.pri_a18_smart_terrain = {killer = true}

function on_game_start()
    bind_campfire.check_no_nearby_campfire = check_no_nearby_campfire

    RegisterScriptCallback("on_before_save_input", on_before_save_input)
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("on_console_execute", on_console_execute)

    on_option_change()
end

function on_before_save_input(flags, typ, text)
    if campfire_saving and level_weathers.valid_levels[level.name()] then
        token_redeemed = false
        local error_message = nil

        local nearby_campfire = bind_campfire.get_nearby_campfire(campfire_radius, true)

        if not nearby_campfire then
            error_message = strformat(getstr("st_ui_no_save_campfire_base"), text)
        elseif not nearby_campfire:is_on() then
            error_message = strformat(getstr("st_ui_no_save_campfire_unlit"), text)
        end

        local within_base = is_within_friendly_base()

        if error_message and not within_base then
            token_redeemed = redeem_token()
            if token_redeemed then
                return
            else
                actor_menu.set_msg(1, error_message, 4)
                exec_console_cmd("main_menu off")
                flags.ret = true
            end
        end
    end
end

function is_within_friendly_base()
    local friendly_bases = get_friendly_bases()

    for id, smart in pairs(friendly_bases) do
        if smart.dist_to_actor < base_radius and surge_manager.actor_in_cover() then
            return true
        end
    end

    return false
end

function get_friendly_bases()
    local friendly_bases = {}
    local community = gameplay_disguise.get_default_comm()

    for id, smart in pairs(SIMBOARD.smarts_by_names) do
        if ish_campfire_debug then
            ish_campfire_debug.draw_map_dot(smart)
        end

        if smart.is_on_actor_level then
            -- Base is considered friendly if it's marked for player's faction or "all"
            local is_safe = smart.props.base > 0 and (smart.props[community] > 0 or smart.props.all > 0)

            -- Some bases are not properly marked for factions in vanilla configs, so we have an override table.  
            is_safe = is_safe or (bonus_bases[smart:name()] and bonus_bases[smart:name()][community])

            if is_safe then
                table.insert(friendly_bases, smart)
            end
        end
    end

    return friendly_bases
end

function check_no_nearby_campfire()
    return false -- Prevent vanilla campfire checking function from interfering.
end

function on_option_change()
    if ui_mcm then
        campfire_saving = ui_mcm.get("yasc/enableCampfireSaving")
        notifications = ui_mcm.get("yasc/enableNotifications")
        notmommy = ui_mcm.get("yasc/isNotMommy")
    end
end

function actor_on_first_update()
    extend_token_downtime()
end

function on_console_execute(cmd)
    if cmd ~= "save" then
        return
    end

    if token_redeemed then
        switch_to_rl_mode()
    else
        extend_token_downtime()
    end
end

function extend_token_downtime()
    token_granted = time_global() + token_downtime
end

function redeem_token()
    local time_remaining = token_granted - time_global()
    has_token = time_remaining <= 0

    if has_token and (key_state(DIK_keys.DIK_LSHIFT) ~= 0 or key_state(DIK_keys.DIK_RSHIFT) ~= 0) then
        return true
    end

    send_notification(time_remaining)

    return false
end

function switch_to_rl_mode()
    exec_console_cmd("quit")
end

function send_notification(time_remaining)
    if notifications then
        local parent_type = getstr(string.format("mommy_%s", not notmommy))

        if time_remaining > 0 then
            news(getstr("token_pending"), parent_type, time_remaining / 1000)
        else
            news(getstr("token_granted"), parent_type)
        end
    end
end

function news(message, ...)
    message = string.format(message, ...)
    if db.actor then
        db.actor:give_game_news("Campfire Saving", message, "ui_inGame2_PD_storonnik_ravnovesiya", 0, 5000, 0)
    else
        printf(message)
    end
end
